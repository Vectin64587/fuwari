---
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
} = Astro.props;
const className = Astro.props.class;

const startAt = 0;
const urlPath = Astro.url.pathname;
---

<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon"
            >
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- view stats -->
    <div class="flex items-center space-x-1">
      <div class="meta-icon">
        <Icon name="material-symbols:visibility-outline-rounded" class="text-xl" />
      </div>
      <span id="umami-pv" class="text-50 text-sm font-medium">loading…</span>
      <span>/</span>
      <span id="umami-visits" class="text-50 text-sm font-medium">loading…</span>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon"
        >
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>
</div>

<script type="module">
  const pvEl = document.getElementById("umami-pv");
  const visitsEl = document.getElementById("umami-visits");

  const startAt = 0;
  const endAt = Date.now();
  const url = window.location.pathname;

  const api = new URL('https://us.umami.is/api/websites/d1844d92-ae49-43d6-8e9a-907ffd4b4e41/stats');
  api.searchParams.set('startAt', startAt);
  api.searchParams.set('endAt', endAt);
  api.searchParams.set('url', url);
  api.searchParams.set('compare', "false");
  api.searchParams.set('unit', "hour");
  api.searchParams.set('timezone', "Asia/Shanghai");

  fetch(api.toString(), {
    method: 'GET',
    headers: {
      'x-umami-share-token': 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3ZWJzaXRlSWQiOiJkMTg0NGQ5Mi1hZTQ5LTQzZDYtOGU5YS05MDdmZmQ0YjRlNDEiLCJpYXQiOjE3NTIzOTIwNTd9.6jFE304NjdNoZeBhRRucmDPD5rmOBjNLPSkT2I-w7WY'
    }
  })
  .then(r => r.ok ? r.json() : Promise.reject(r))
  .then(data => {
    pvEl.textContent = data.pageviews?.value?.toLocaleString() ?? '-';
    visitsEl.textContent = data.visits?.value?.toLocaleString() ?? '-';
    console.info(api.toString())
  })
  .catch(err => {
    console.error('Umami 请求失败', err);
    pvEl.textContent = '-';
    visitsEl.textContent = '-';
  });
</script>